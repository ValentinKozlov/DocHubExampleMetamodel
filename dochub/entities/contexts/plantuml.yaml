# Расширение сущности "Contexts" для генерации PlantUML диаграмм
entities:
  contexts:
    # Предопределенные конфигурационные параметры для генерации PlantUML
    config:
      # Какой движок будет использоваться для рендера
      renderCore: elk # elk / smetana / graphviz
    # API функции, используемые для генерации PlantUML
    api:
      # Генерирует на данных о компонентах и областях PlantUML диаграмму компонентов
      # Входящие параметры:
      #   manifest   - данные архитектуры
      #   components - список компонентов в формате fetchComponents
      #   areas      - список компонентов в формате fetchAreas
      makePumlComponentDiagram: >
        (
          /* Обрабатываем параметры */
          $areas := areas;
          $components := components;
          $manifest := manifest;
        
          $join($map($areas, function($domain, $index) {(
              $result := "";
              $component := $lookup($components, $domain);
              $originComponent := $lookup($manifest.components, $domain);
              $context := $lookup($manifest.contexts, $domain);
        
              /* Определяем является ли элемент областью */
              $isAreaBegin := $areas[$index + 1].$substring(0, $domain.$length() + 1) = $domain & ".";
        
              $result := $result & ($isAreaBegin ? (
                  $title := $originComponent.title ? $originComponent.title : (
                      $context.title ? $context.title : $domain
                  );
                      "$Region("
                      & $domain
                      & ",\"[[/architect/components/"
                      & $domain
                      & " " & $title
                      & "]]\", ) {\n";
              ) : "");
        
              /* Если домен является компонентом, выводим его на диаграмму */
              $result := $result & (
                  $not($isAreaBegin) and $component ? (
                      /* Открываем секцию компонента */
                      $entity := $component.entity ? $component.entity : "component";
                      $result := "$Entity(\"" 
                          & $entity 
                          & "\", \""
                          & "[[/architect/components/" & $domain & " " & $component.title & "]]"
                          & "\", " 
                          & $domain
                          & ", ,"& ($exists($component.color) ? ("#" & $component.color) : ("")) &")\n";
        
                      /* Добавляем аспекты */
                      $result := $result & $join($component.aspects.(
                          $aspect := $lookup($manifest.aspects, $);
                          $title := $aspect ? $aspect.title : $;
                          "$EntityAspect(\""
                          & $entity
                          & "\",\"[[/architect/aspects/"
                          & $
                          & " " 
                          & $title 
                          & "]]\")\n"
                      ));
        
                      /* Если компонент является контекстом добавляем дрилдаун */
                      $context ? 
                          $result := $result & "$EntityExpand(\""
                          & $entity
                          & "\", "
                          & $domain
                          & ")\n";
        
                      /* Закрываем секцию компонента */
                      $result := $result & 
                          "$EntityEnd(\""
                          & $entity
                          & "\")\n";
                  ): "";
              );
        
              /* Определяем, что область нужно закрыть*/
              $result & (
                $count($split($domain, ".")) > 1 
                and ($count($split($domain, ".")) > $count($split($areas[$index + 1], "."))
              ) ? "}\n" : "");
          )}));
        )
      # Генерирует PlantUML код связей для диаграммы компонентов
      # Входящие параметры:
      #   links - список связей в формате fetchLinks
      makePumlComponentsLinks: >
        (
          $join(links.(
            from & " " & direction & " " & to & (title ? ": " & title : "") & "\n"
          ))
        )
    # Представления контекстов в PlantUML
    presentations:
      plantuml:
        title: Представление в PlantUML
        params:
          title: Требуемые параметры для презентации
          type: object
          properties:
            "dh-context-id":
              title: Идентификатор контекста
              type: string
              pattern: ^[a-zA-Z][a-zA-Z0-9_-]*(\.[a-zA-Z][a-zA-Z0-9_-]*)*$
          required:
            - dh-context-id
        type: plantuml
        $constructor: >  # Переносим необходимую информацию из контекста в презентацию 
          (
            $id := $params."dh-context-id";
            $context := $lookup(contexts, $id);
            $prototype := entities.contexts.presentations.plantuml;
          
            /* Преобразует относительные пути к файлам в прямые*/
            $toDirectRes := function($value) {
                $substring($value, 0, 4) = "res:" ? $value : "res://contexts/" & $id & "#" & $value
            };

            /* Если явно указан puml файл, просто рендерим его */
            ($type($context.uml) = "string") and ($substring($context.uml, -5) = ".puml") ? (
                {
                  "type": "plantuml",
                  "source": $toDirectRes($context.uml)
                }
            ) : (
                $result := $context.source ? ($merge([$prototype, {
                    "origin": { "_source": $context.source, "_origin": "($)" }
                }])) : $prototype;

                /* Если в контексте переопределен шаблон, используем его по прямой ссылке */
                $result := $context.template 
                    ? $merge([$result, { "template":  $toDirectRes($context.template) }])
                    : $result;
            )
          )
        template: templates/template.puml
        source: >
          (
            $id := $params."dh-context-id";
            /* Получаем доступ к оригинальным данным */
            $manifest := _origin ? _origin : $;
            /* Получаем контекст */
            $context := $lookup($manifest.contexts, $id);
            /* Если в контексте задан источник, берем его за основу */
            $manifest := _source ? _source : $;
          
            $isExtraLinks := $not($string($context."extra-links") = "false");
          
            /* Получаем коллекцию дефолтных вспомогательных функций */
            $defFunctions := $manifest.entities.contexts.api;
          
            /* Получаем коллекцию дефолтных параметров */
            $defConfig := $manifest.entities.contexts.config; 
          
            /* Определяем движок рендеринга */
            $renderCore := $lookup({
              "elk": "!pragma layout elk",
              "smetana": "!pragma layout smetana"
            }, $defConfig.renderCore);

            /* Формируем заголовок */
            $header := "$Header(\"" & ($context.title ? $context.title : $id ) & "\", \"" & $context.uml."$autor" & "\", \"" & $context.uml."$version" & "\" , \"" & $context.uml."$moment" & "\")\n";

            /* Получаем все компоненты входящие в контекст */
            $components := $eval($defFunctions.fetchComponents, {
              "manifest": $manifest,
              "contextId": $id,
              "extra-links": $isExtraLinks,
              "componentId": $params.componentId
            });

            /* Генерируем области */
            $areas := $eval($defFunctions.fetchAreas, {
              "components": $components
            });
          
            /* Генерируем PlantUML диаграмму компонентов */
            $elements := $eval($defFunctions.makePumlComponentDiagram, {
              "manifest": $manifest,
              "areas": $areas,
              "components": $components
            });

            /* Получаем список связей */
            $links := $eval($defFunctions.fetchLinks, {
              "components": $components
            });
          
            /* Генерируем код связей */
            $linksCode := $eval($defFunctions.makePumlComponentsLinks, {
              "links": $links
            });
          
            /* Готовим данные для передачи в шаблон */
            {
              "renderCore": $renderCore,
              "presentation": $defConfig.defaultPresentation,
              "code": $header & $elements & $linksCode
            }
          )
