entities:  
 swamp_structure:
    title: Управленческая структура ГК Самолёт
    description: >
      При помощи данной бизнес-сущности описывается управленческая структура ГК Самолёт
    menu: >
      (
        [
          {
            "location": "Документация/Управленческая структура ГК Самолёт",
            "link": "entities/swamp_structure/structure_tree"            
          }
        ]
      )

    presentations:
      structure_tree:
        type: plantuml
        template: templates/structure_tree.puml
        source: >
          (
              $set("rpev-id", undefined);
              $arrleft := function($arr ,$count) {
                  $map($arr, function($v, $i) {
                      $i <= $count ? $v
                  })
              };
              $swamp_structure := $.swamp_structure;
              [$swamp_structure.$spread().($merge([{"id" : $keys()[0]}, $.*]))^(id).(
                  $prev_nodes := $split($get("rpev-id"), ".");
                  $prev_level := $count($prev_nodes);
                  $curr_nodes := $split(id, ".");
                  $set("isdiff", false);
                  $result := $map($curr_nodes, function($v, $i) {(
                      $set("isdiff", $get("isdiff") or $prev_level = 0 or $prev_level <= $i or $v != $prev_nodes[$i]) ? (
                          $id := $join($arrleft($curr_nodes, $i), ".");
                          $menu :=  $lookup($swamp_structure, $id);
                          {
                              "id": $id,
                              "level": $pad("", $i + 2, "*"),
                              "title": $menu ? $menu.title : $id,
                              "link": "/entities/swamp_structure/structure_card?id=" & $id
                          }
                      );
                  )});
                  $set("rpev-id", id);
                  $result
              )];
          )

      # Карточка развертывания системы
      structure_card:
        type: markdown
        title: Карточка департамента
        params:
          type: object
          properties:
            id:
              type: string
          required:
            - id
        template: templates/structure_card.md
        source: >
          (
            $systems := [$.swamp_structure.$spread().$merge([$.*, {"id": $keys($)}])];
            $systems [id=$params.id];
          )

      # Данные для API
      # https://dochub.swampgroup.ru/entities/swamp_structure/presentations/get_swamp_structure
      #Для теста
      # http://localhost:3030/entities/swamp_structure/presentations/get_swamp_structure
      get_swamp_structure:
        type: upload
        title: JSON структура ГК Самолёт        
        source: >
          (
            $swamp_structure := $.swamp_structure.$spread().($merge([{"id" : $keys()[0]}, $.*]));
            $thech_structure := [$swamp_structure.(
              $id := id;              
              $curr_nodes := $split($id , ".");
              $curr_level := $count($curr_nodes);
              $structure := $;
              /*Надо подумать как переделать на рекурсивную функцию, а то выглядит страшно*/
              $result := $curr_level = 2
              ?
              (       
                $pattern := $eval("/^" & $id & "\\.[a-zA-Z0-9\\_]*$/");
                {
                  "businessUnitName": $structure.title,
                  "businessUnitOwner": $structure.owner,
                  "techUnits": $swamp_structure[id ~> $pattern].(
                    $pattern := $eval("/^" & id & "\\.[a-zA-Z0-9\\_]*$/");
                    $merge([$, {"techUnits": $swamp_structure[id ~> $pattern].(
                    $pattern := $eval("/^" & id & "\\.[a-zA-Z0-9\\_]*$/");
                    $merge([$, {"techUnits": $swamp_structure[id ~> $pattern].(
                      $pattern := $eval("/^" & id & "\\.[a-zA-Z0-9\\_]*$/");
                      $merge([$, {"techUnits": $swamp_structure[id ~> $pattern].(
                        $pattern := $eval("/^" & id & "\\.[a-zA-Z0-9\\_]*$/");
                        $merge([$, {"techUnits": $swamp_structure[id ~> $pattern]}]);
                        )}]);
                      )}]);
                    )
                    }])
                  )
                };
              );
            )];
          )