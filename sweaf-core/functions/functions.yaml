# Новый вариант функций https://dochub.info/entities/docs/blank?dh-doc-id=dochub.functions

functions:
  get_account:
    title: Получить данные аккаунта по переданному логину
    # Входящие параметры
    params:      
      - alias: username        
        title: Логин пользователя Самолет
        required: false
      - alias: accounts
        type: array
        title: Список учетных записей
        required: true
    code: >
      (
        $username := username;
        $accounts := accounts;
        $acc_link := "https://team.swampgroup.ru/profile/" & $username;
        $type($username)="string"
        ? (
            $full_account := $accounts[name=$username];
            $count($full_account) = 1
            ?   (
                $type($full_account.title)="string"
                ?
                $merge([$full_account, {"error" : false, "acc_link": $acc_link}])
                :
                {
                    "name": $username,
                    "title": $username,
                    "bu": "Наименование БЮ неопределенно",
                    "error" : true
                };
                )
            : $count($full_account) > 1
              ?
                $full_account.(
                  $type($.bu) = "string"
                  ? $merge([$, {"error" : false, "acc_link": $acc_link}])
                )
              :
                {
                  "name": "Аккаунт не указан",
                  "title": "Аккаунта " & $username & " нет в справочнике DocHub",
                  "bu": "Наименование БЮ неопределенно",
                  "error" : true
                };
          )
        :
          {
              "name": "Аккаунт не указан",
              "title": "Аккаунт не указан",
              "bu": "Наименование БЮ неопределенно",
              "error" : true
          };
      )

  get_parent_tu:
    title: Получить родителя tactical_unit
    # Входящие параметры
    params:
      - alias: tu_id
        type: string
        title: Идентификатор tactical_unit указанный в системе
        required: false
      - alias: tactical_units
        type: object
        title: Все тактические юниты
        required: true
      - alias: tu_type
        type: array
        items:
          type: string  # Элементы массива должны быть числами
        minItems: 1
        title: Тип tactical_unit
        required: true
    code: >
      ( 
        $tu_id := tu_id;
        $tu_type := tu_type;
        $tactical_units := tactical_units;

        /* Рекурсивная функция для получения родителя для переданного tu_id */        
        $get_parent := function($tu_id, $tactical_units, $tu_type) {(
          $result := $tu_id
          ?
            (
              $tu := $lookup($tactical_units, $tu_id);
              $exists($tu) ?
              (                
                $tu.type in $tu_type ? $merge([{"tu_id": $tu_id}, $tu]) : $tu.parent
                ? (
                    $result := $get_parent($tu.parent, $tactical_units, $tu_type);
                  )
                : "";
              )
              : ""
            )
          :
            "";
        )};        
        $get_parent($tu_id, $tactical_units, $tu_type);
      )

  get_parent_tu_by_role:
    title: Получить родителя tactical_unit
    # Входящие параметры
    params:
      - alias: tu_id
        type: string
        title: Идентификатор tactical_unit указанный в системе
        required: false
      - alias: tactical_units
        type: object
        title: Все тактические юниты
        required: true
      - alias: role_type
        type: string
        title: Роль (application_owner/budget_holder/architect/business_owners)
        required: true
    code: >
      ( 
        $tu_id := tu_id;
        $role_type := role_type;
        $tactical_units := tactical_units;

        /* Рекурсивная функция для получения родителя для переданного tu_id */        
        $get_parent := function($tu_id, $tactical_units, $role_type) {(
          $result := $tu_id
          ?
            (
              $tu := $lookup($tactical_units, $tu_id);
              $exists($tu) ?
                ( 
                  $exists($lookup($tu, $role_type)) ? $tu : $exists($tu.parent) ? $result := $get_parent($tu.parent, $tactical_units, $role_type) : "";
                )
              : "";
            )
          : "";
        )};    
        $get_parent($tu_id, $tactical_units, $role_type);
      )
  
  
  # Получить параметры системы. Данные берутся либо из самой системы либо из tactical_units
  get_systems_parameters:
    title: Получить параметры системы по tactical_units
    # Входящие параметры
    params:
      - alias: system_id
        type: string
        title: Идентификатор системы
        required: true
      - alias: systems
        type: object
        title: Все системы
        required: true
      - alias: tactical_units
        type: object
        title: Все тактические юниты
        required: true
    code: >
      ( 
        $system_id := system_id;
        $systems := systems;
        $tactical_units := tactical_units;

        $system := $lookup($systems, $system_id);
        $system.entity = "system"
        ? (
            /*Если указали пустое поле без значения, то будет null, а с ним все падает дальше*/          
            $tactical_unit := $lookup($tactical_units, $system.tactical_unit = null ? "" : $system.tactical_unit);
            $business_owners := ($system.business_owners) ? $system.business_owners : $get_parent_tu_by_role($system.tactical_unit, $tactical_units, "business_owners").business_owners;
            $application_owner := ($system.application_owner) ? $system.application_owner : $get_parent_tu_by_role($system.tactical_unit, $tactical_units, "application_owner").application_owner;
            $architect := ($system.architect) ? $system.architect : $get_parent_tu_by_role($system.tactical_unit, $tactical_units, "architect").architect;
            $budget_holder := ($system.budget_holder) ? $system.budget_holder : $get_parent_tu_by_role($system.tactical_unit, $tactical_units, "budget_holder").budget_holder;
            {            
              'business_owners': ($business_owners) ? $business_owners : "Не заполнено",
              'application_owner': ($application_owner) ? $application_owner : "Не заполнено",
              'architect': ($architect) ? $architect : "Не заполнено",
              'budget_holder': ($budget_holder) ? $budget_holder : "Не заполнено",            
              'tactical_unit': ($tactical_unit.title) ? $tactical_unit.title : "tu не заполнен"
            }
          )
        : ""
      )

# Функции для расчета рейтинга по индикаторам здоровья

  # Получение общего рейтинга по идентификатору системы
  get_systems_total_rating:
    title: Рассчитать общий рейтинг системы
    # Входящие параметры
    params:
      - alias: system_id
        type: string
        title: Идентификатор системы
        required: true
      - alias: systems
        type: object
        title: Все системы
        required: true
      - alias: dictionaries
        type: object
        title: Все справочники
        required: true
    code: >
      (
        $system_id := system_id;        
        $systems := systems;          
        $dictionaries := dictionaries;        
        $system := $lookup($systems, $system_id);     
        $system := $merge([{"id" : $system_id}, $system]);   
        $system.entity = "system"
        ? (
            $system_indicators := $get_system_indicators($system, $dictionaries);
            $rate := $get_indicators_total_rating($system_indicators, $dictionaries);
          )
        : ""        
      )

  get_system_indicators:
    title: Получить список индикаторов здоровья по системе
    # Входящие параметры
    params:
      - alias: system
        type: object
        title: Система
        required: true
      - alias: dictionaries
        type: object
        title: Все справочники
        required: true
    code: >
      (
        $system := system;
        $dictionaries := dictionaries;
        $indicators := $dictionaries."system_health.indicators".parameters;
        $is_ext_system := $contains($system.id, $get_ext_systems_pattern());
        $system_indicators := 
          $is_ext_system = false 
          ? $indicators.(
            $indicator := $;
            $system_indicator := $system.indicators[id = $indicator.name];
            {
                'id': $indicator.name,
                'fit': $system_indicator ? $system_indicator.fit : "none",
                'comment': $system_indicator ? $system_indicator.comment : null,
                'date': $system_indicator ? $system_indicator.date : null
            }
          );
      )

  # Расчет общего рейтинга системы на основании оценок индикаторов здоровья
  get_indicators_total_rating:
    title: Рассчитать общий рейтинг системы на основании оценок индикаторов здоровья
    # Входящие параметры
    params:
      - alias: system_indicators
        type: array
        title: Индикаторы здоровья конкретной системы
        required: false
      - alias: dictionaries
        type: object
        title: Все справочники
        required: true
    code: >  
      (
        $system_indicators := system_indicators;
        $dictionaries := dictionaries;
        $indicators := $dictionaries."system_health.indicators".parameters;
        $fitness := $dictionaries."system_health.fitness".parameters;
        $ratings := $dictionaries."system_health.ratings".parameters;
        $max_indicator_weight := $max($indicators.weight);
        $min_fit := $sort($fitness, function ($l, $r) { $l.rate > $r.rate })[0].name;

        $normalized_system_indicators := $map(
          $system_indicators,
          function($indicator, $k) {
            {
                'id': $indicator.id,
                'fit': 1 - (1 - $fitness[name=$indicator.fit].rate) * $indicators[name=$indicator.id].weight / $max_indicator_weight
            }
          }
        );

        $system_average_fit := 
          $count(
            $filter(
              $system_indicators, 
              function ($indicator) { $indicator.fit = $min_fit and $indicators[name=$indicator.id].is_critical }
            )
          ) > 0 
            ? 0
            : $average($normalized_system_indicators.fit);

        $rate := $reduce(
            $sort($ratings, function ($a, $b) {$a.threshold > $b.threshold}), 
            function ($rating, $value) {
                $rating := $system_average_fit >= $value.threshold ? $value.name : $rating
            },
            null
        );
        $ratings[name=$rate];
      )

  get_accounts_list:
    title: Собрать список логинов для загрузки данных через коллектор
    # Входящие параметры
    params:
      - alias: manifest
        type: object
        title: Все озеро данных
        required: true
    code: >  
      (
        $manifest := $.manifest;

        /* Создаем массив со списком имен полей из которых будем выбирать логины */
        $scan_fields := ["budget_holder", "application_owner", "business_owners", "architect"];

        /* Пишем функцию для получения логинов из разных сущностей */
        /* Пока в качестве одного из параметров передаем scan_fields, чтобы если что можно было поменять состав поиска */
        $accounts := function($entities, $scan_fields) {(
            /* Делаем регулярку на выбор только латинских букв */
            $matcher := /^[a-z]/;
            $temp_accounts := $distinct($entities.(
                $entity := $; /* Получаем конкретный экземпляр сущности*/
                $scan_fields.(
                    $lookup($entity, $); /* Внутри конкретной сущности берем значение конкретного реквизита для каждого поля указанного в $scan_fields*/
                )[$matcher($)]; /*Каждое полученное значение сверяем с регуляркой и лишнее игнорируем*/
            ))[$];/*В предыдущей выборке будут null-ы, для того чтобы избавиться от них делаем фильтр*/

        )};

        /* Соединяем полученные массивы */
        $all_accounts := $distinct(
          $append(
            $append(
              $accounts($manifest.components.*, $scan_fields), 
              $accounts($manifest."smlteaf.app.arch_versions".*.сhanged_data.*, $scan_fields)
            ),
            $append(
              $accounts($manifest."smlteaf.ba.tactical_units".*, $scan_fields),
              $accounts($manifest."smlteaf.app.libraries".*, ["mentor", "maintainers"])
            )
          )
        );
      )
  
  get_systems_for_context:
    title: Получить список систем по конкретному tactical_unit для вывода в контекстах
    # Входящие параметры
    params:
      - alias: manifest
        type: object
        title: Все озеро данных
        required: true
      - alias: isExtraLinks
        type: boolean
        title: Добавить в контекст связанные системы из других tu
        required: true
      - alias: tu_array
        type: array
        title: Фильтр по tactical_units
        required: true
    code: >  
      (
        $manifest := manifest;
        $isExtraLinks := isExtraLinks;
        $tu_array := tu_array;        
        
        $result := $manifest.components.$sift(function($v) { $v.entity="system" and $v.tactical_unit in $tu_array });

        /* Добавляем окружение, если это нужно */
        $result := $merge([$result, $isExtraLinks ? (
            $result.*.links.(
              {
                id: $isSelf 
                  ? $merge([$lookup($manifest.components, id), { "links": [] }])
                  : $lookup($manifest.components, id)
              }
            );
        ) : {}]);

        /* Перезаписываем данные манифеста новыми компонентами, если они есть */
        $result ? $merge([$manifest, {"components": $merge($result)}]);
      )

  get_sys_aspect:
    title: Получить аспект системы с разбивкой по функции и группе функциональности    
    params:
      - alias: sys_aspect        
        title: Функциональность системы описанная в формате aspect_group.aspect 
        required: false
      - alias: aspects
        type: object
        title: Все аспекты описанные в модели
        required: true
      - alias: business_areas        
        title: Все business_areas описанные в модели
        required: true
    code: >
      (       
        $sys_aspect := sys_aspect;
        $aspects := aspects;
        $business_areas := business_areas;
        
        $sys_aspect := $string($sys_aspect);
        $aspect_list := $split($sys_aspect,".");

        /*Если передается пустая строка, то количеству аспектов присваиваем 0 */
        $aspect_count := $length($sys_aspect) != 0 ? $count($aspect_list) : 0;
        $aspect_count > 2
        ?
          {
            "aspect_id": "",
            "aspect": "",
            "aspect_group_id": "",
            "aspect_group": "",
            "business_area": "",
            "error" : true,
            "error_desc" : "В разделе aspects должно быть указано не более двух сегментов функциональности: " & $sys_aspect
          }
        : $aspect_count = 0
          ? 
            {
              "aspect_id": "",
              "aspect": "",
              "aspect_group_id": "",
              "aspect_group": "",
              "business_area": "",
              "error" : true,
              "error_desc" : "Нет раздела aspects или в нем не указана функциональность"
            }
          : /* $aspect_count = 1 или $aspect_count = 2*/
            (
              /*Берем последнюю запись в массиве и это либо функциональность, либо группа функциональности если функциональность не описана*/
              $aspect_position := $aspect_count - 1;
              $aspect_id := $aspect_list[$aspect_position];
              $aspect := $lookup($aspects, $aspect_id);
              $result := $exists($aspect)
              ? 
                $type($aspect.business_area) = "string"
                ?
                  {
                    "aspect_id": "",
                    "aspect": "",
                    "aspect_group_id": $aspect_id,
                    "aspect_group": $aspect,                
                    "business_area": $business_areas[name=$aspect.business_area],
                    "error" : false,
                    "error_desc" : ""
                  }
                : 
                  {
                    "aspect_id": $aspect_id,
                    "aspect": $aspect,
                    "aspect_group_id": "",
                    "aspect_group": "",                
                    "business_area": "",
                    "error" : false,
                    "error_desc" : ""
                  }
              :
                {
                  "aspect_id": "",
                  "aspect": "",
                  "aspect_group_id": "",
                  "aspect_group": "",
                  "business_area": "",
                  "error" : true,
                  "error_desc" : "В разделе aspects указана функциональность не описанная в справочнике aspects: " & $aspect_id
                };
              
              /*Если указано 2 сегмента, то первый это группа*/
              $result := $aspect_count = 2
              ? 
                (
                  $aspect_id := $aspect_list[0];
                  $aspect := $lookup($aspects, $aspect_id);
                  $exists($aspect)
                  ? $merge([$result,
                    {                  
                      "aspect_group_id": $aspect_id,
                      "aspect_group": $aspect,
                      "service_type": $aspect.service_type,
                      "business_area": $business_areas[name=$aspect.business_area]
                    }
                  ])
                  : $merge([$result,
                      {
                        "error" : true,
                        "error_desc" : "В разделе aspects указана группа функциональности не описанная в справочнике aspects: " & $aspect_id
                      }
                    ])
                )
              : $merge([$result,
                  {
                    "error" : true,
                    "error_desc" : "Указан только один из сегментов функциональности. Необходимо указать оба"
                  }
                ])
            );
      )
         
  get_system_by_aspect:
    title: Получить систему по функциональности
    # Входящие параметры
    params:
      - alias: aspect
        type: string
        title: Функциональность 
        required: true
      - alias: systems
        type: object
        title: Все системы
        required: true      
    code: >
      ( 
        $aspect := aspect;
        $systems := systems;        
        $systems.$sift(function($v) { $v.entity="system"  and $contains($join($v.aspects, ","), $aspect)  }).$spread().(
          $aspect_id := $keys()[0];
          $system := $.*;          
        );
      )

  get_ext_systems_pattern:
    title: Получает строку поиска в виде регулярного выражения для определения внешних систем
    code: >  
      (
        $ext_systems_pattern := /world\..*/;
      )

  add_object_id:
    title: Добавляет id объекта к данным по объекту
    params:
      - alias: object_id
        type: string
        title: Идентификатор объекта
        required: true
      - alias: object
        type: object
        title: Объект куда нужно добавить идентификатор
        required: true    
    code: >  
      (
        $object := object;
        $object_id := object_id;
        $merge([{"id" : $object_id}, $object]);
      )

