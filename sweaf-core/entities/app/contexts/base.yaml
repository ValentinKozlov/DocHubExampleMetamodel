#  Базовое описание сущности "Contexts"
entities:
  contexts:
    menu: >
      (
          $root_menu := entities.contexts.config.root_menu;
          $presentation := entities.contexts.config.defaultPresentation;
          [
              contexts.$spread().(
                  /* Если указана явно презентация, используем ее */
                  $presentation := $.*.presentation ? *.presentation : $presentation;
                  *.location ? {
                      "location": $root_menu & "/" & *.location,
                      "link": "entities/contexts/" & $presentation & "?dh-context-id=" & $keys()[0]
                  }
              )
          ]
      )
    # Предопределенные конфигурационные параметры для генерации контекстов
    config:
      # Идентификатор презентации по умолчанию
      defaultPresentation: plantuml # plantuml / smartants / c4_context
      root_menu: Прикладная архитектура
    # Общие API функции для генерирования контекста
    api:
      # На основании списка компонентов генерирует массива областей которые они затрагивают
      # Входящие параметры:
      #   components - список компонентов в формате fetchComponents
      fetchAreas: >
        (
          $params := $;          
          $isAddGroup := $params."add-group";
          $distinct($params.components.$spread().(
              $componentId := $keys()[0];
              /*Если в контексте указан флаг группировки add-group: true и в системах указан tactical_unit, то добавляем еще одну группировку после БЮ*/
              $componentId := $isAddGroup ?
                (
                  $tactical_unit := $.*.tactical_unit;
                  $bu_id := $split($componentId, ".", 2) ~> $join('.');
                  $componentId := ($tactical_unit) ? $replace($componentId, $bu_id, $bu_id & "." & $tactical_unit) : $componentId;
                ): $componentId;
              
              $domains := $componentId.$split(".");
              $limit := $count($domains) - 1;
              $areaId := $map($domains, function($v, $i) {(
                  $join($map($domains, function($sv, $si) {
                      $si <= $i ? $sv
                  }), ".")
              )});
          ))^($);          
        )